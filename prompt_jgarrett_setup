#!/usr/bin/env zsh
#
# JGarrett Zsh Theme for Prezto
# Created with modified code by Chauncey Garrett - @chauncey_io
# and modifications by James M. Allen - @jamesmallen
#
# https://github.com/jamesmallen/zsh-prompt-jgarrett
#
# A prompt with the information you need the moment you need it.
#
# This prompt has the following features:
#   - Change prompt color when UID is root
#   - Change host color when on ssh
#   - Display full or truncated hostname on ssh
#   - Determine the number of background jobs
#   - Report the truncated present working directory
#   - Report return codes other than 0
#   - Report local time
#   - Report the terminal line number
#   - Report git status using a modified version of oh-my-git (https://github.com/arialdomartini/oh-my-git)
#   - Indicate vi-mode
#   - Notifications for commands taking longer than n time
#
# Features may be disabled and rearranged as desired by using the corresponding tokens.
#

# Load dependencies.
pmodload 'helper'

# Prompt configuration help.
# TODO not even remotely finished...
# function prompt_jgarrett_help() {
# cat <<'EOF'

# This prompt is configurable via styles:

  # Context: :prompt:jgarrett

  # Colors (red green yellow blue magenta cyan white grey):
    # prompt_jgarrett_color_user     The color for user@host. Defaults to 'green'
    # root_color                    The color for the hostname for root. Defaults to 'red'
    # prompt_jgarrett_color_prompt   The color for everything else. Defaults to ''

  # Path (path type - possible values):
    # ratio    Use COLUMNS/ratio to clip the path. Default.
    # fixed    Use a fixed maximum length.
    # subdir   Clip by number of subdirectories.
    # full     Show the full path

  # Path length styles:
    # ratio    The ratio for the 'ratio' path style, funnily enough. Defaults to 6.
    # length   The maximum length for the 'fixed' path style. Defaults to 20.
    # subdir   The number of subdirectories to show for the 'subdir' path style. Defaults to 3.

  # You can set styles in the current terminal to test things out, values will be updated.

# EOF
# }

# Display a preview of the prompt.
# TODO not ready.
# function prompt_jgarrett_preview {

  # Display the passed in parameters.
  # if (( $> 0 )); then
    # prompt_preview_theme 'jgarrett' "$@"

  # Display the default settings.
  # else
    # prompt_preview_theme 'jgarrett' red green blue
  # fi
# }

# Truncate the PWD display, if needed.
function prompt_jgarrett_pwd {
  local pwd="${PWD/#$HOME/~}"

  # PWD will fit.
  if [[ "$pwd" == (#m)[/~] ]]; then
    prompt_jgarrett_current_dir="${prompt_jgarrett_color_pwd}$MATCH"
    unset MATCH

  # PWD needs truncation.
  else
    prompt_jgarrett_current_dir="${prompt_jgarrett_color_pwd}${${${(@j:/:M)${(@s:/:)pwd}##.#?}:h}%/}/${pwd:t}"
  fi
}

# Notify of command completion after n seconds has passed.
function prompt_jgarrett_precmd_notification {

  # Trigger a notification after n seconds have elapsed.
  prompt_jgarrett_delay_after_notification=1

  # Determine time elapsed.
  prompt_jgarrett_precmd_time_elapsed_start=${prompt_jgarrett_preexec_time:-$(date +'%s')}
  prompt_jgarrett_precmd_time_elapsed_stop=$(date +'%s')
  let prompt_jgarrett_precmd_time_elapsed=$prompt_jgarrett_precmd_time_elapsed_stop-$prompt_jgarrett_precmd_time_elapsed_start

  # n seconds have passed, so notify!
  if [ $prompt_jgarrett_precmd_time_elapsed -gt $prompt_jgarrett_delay_after_notification ]; then

    # Notify via tput while on ssh.
    if [[ -n "$SSH_CLIENT" || -n "$SSH2_CLIENT" ]]; then
      tput bel

    # Use local notifications.
    else

      # On OS X, notify with terminal-notifier.
      if [[ "$OSTYPE" == darwin* ]] && (( $+commands[terminal-notifier] )); then
        terminal-notifier \
          -title "${prompt_jgarrett_preexec_cmd:-Unknown command}" \
          -message "Required $prompt_jgarrett_precmd_time_elapsed s" \
          -sound Tink

      # On OS X, notify with growlnotify.
      elif [[ "$OSTYPE" == darwin* ]] && (( $+commands[growlnotify] )); then
        growlnotify \
          -n "Terminal" \
          -t "${prompt_jgarrett_preexec_cmd:-Unknown command}" \
          -m "Required $prompt_jgarrett_precmd_time_elapsed s"

      # On linux, notify with notify-send.
      elif [[ "$OSTYPE" == linux-gnu ]] && (( $+commands[notify-send] )); then
        notify-send \
          "${prompt_jgarrett_preexec_cmd:-Unknown command}" \
          "Required $prompt_jgarrett_precmd_time_elapsed s"

      # Notify via tput.
      else
        tput bel
      fi
    fi
  fi
}

# Handle clearing the screen with ^L.
function prompt_jgarrett_clear_screen() {

  # Enable output to terminal.
  zle -I

  clear
  prompt_jgarrett_preprompt_render
}

# A function executed whenever the directory is changed.
function prompt_jgarrett_chpwd {

  # List the contents of the new directory.
  if is-callable 'dircolors'; then

    # GNU flavor ls.
    if zstyle -t ':prezto:module:utility:ls' color; then
      ls --group-directories-first --color=auto
    else
      ls -F
    fi
  else

    # BSD flavor ls.
    if zstyle -t ':prezto:module:utility:ls' color; then
      ls -G
    else
      ls -F
    fi
  fi
}

# Functions called before command execution.
function prompt_jgarrett_preexec {

  # Define timer and command for notification.
  export prompt_jgarrett_preexec_time=$(date +'%s')
  export prompt_jgarrett_preexec_cmd="\$ $1"

  # Ensure terminal code isn't colored from prompt.
  print -n "$reset_color"
}

# Functions called before each prompt is displayed.
function prompt_jgarrett_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Show number of background jobs.
  prompt_jgarrett_number_jobs="%(1j.${prompt_jgarrett_color_prompt}J:${cyan}%j .)"

  # Format PWD.
  prompt_jgarrett_pwd

  # Trigger a notification after x time has elapsed.
  eval prompt_jgarrett_precmd_notification

  # Get Ruby info.
  if (( $+functions[ruby-info] )); then
    ruby-info
  fi

  prompt_jgarrett_preprompt_render
}

# Add a line to prompt for visibility.
function prompt_jgarrett_preprompt_render() {

  # Determine the width.
  local prompt_jgarrett_width_terminal
  (( prompt_jgarrett_width_terminal= ${COLUMNS} - 1 ))

  # Determine the length needed for prompt_jgarrett_space.
  # NOTE: Be sure not to include the ${(e)prompt_jgarrett_space} portion or it won't work.
  local prompt_line1="${prompt_jgarrett_upper_left_corner}( ${prompt_jgarrett_current_dir}$(omg_build_prompt) )( ${ruby_info[version]}${prompt_jgarrett_location} )${prompt_jgarrett_upper_right_corner}"
  local zero='%([BSUbfksu]|([FBK]|){*})'
  local prompt_jgarrett_width_line1=${#${(S%%)prompt_line1//$~zero/}}

  # Calculate the padding.
  local prompt_jgarrett_space_padding
  (( prompt_jgarrett_space_padding= ${prompt_jgarrett_width_terminal} - ${prompt_jgarrett_width_line1} ))

  # Add the correct number of characters.
  local prompt_space_character="${prompt_jgarrett_altchar_padding}"
  eval prompt_jgarrett_space="${prompt_jgarrett_color_prompt}\${(l.${prompt_jgarrett_space_padding}..${prompt_space_character}.)}"

  # Newline + Prompt line 1 (set above PROMPT, below).
  print -P '\n${prompt_jgarrett_altchar_enable}${prompt_jgarrett_color_prompt}${prompt_jgarrett_upper_left_corner}( ${prompt_jgarrett_current_dir}$(omg_build_prompt) ${prompt_jgarrett_color_prompt})${prompt_jgarrett_altchar_enter}${(e)prompt_jgarrett_space}${prompt_jgarrett_altchar_leave}( ${ruby_info[version]}${prompt_jgarrett_location}${prompt_jgarrett_color_prompt} )${prompt_jgarrett_upper_right_corner}'
}

# Configure the prompt.
function prompt_jgarrett_setup {

  # Load necessary modules.
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Add hooks for calling preexec, precmd & chpwd.
  autoload -Uz add-zsh-hook
  add-zsh-hook preexec prompt_jgarrett_preexec
  add-zsh-hook precmd prompt_jgarrett_precmd
  add-zsh-hook chpwd prompt_jgarrett_chpwd

  #
  # Colors
  #

  # Alias the colors.
  [[ -z $(functions colors) ]] && autoload -U colors && colors
  for color in black red green yellow blue magenta cyan white grey; do

    # Normal colors.
    eval $color='%F{${(L)color}}'

    # Bold colors.
    eval ${color}_bold='%B{${(L)color}}'
  done

  # Color scheme.
  eval prompt_jgarrett_color_pwd=\$\{${2:-'${blue}'}\}
  # eval prompt_jgarrett_color_pwd=${2:-'${blue}'}
  eval prompt_jgarrett_color_line_number=${5:-'${magenta}'}
  eval prompt_jgarrett_color_time=${6:-'${green}'}
  # eval prompt_jgarrett_color_git_branch=${7:-'${green}'}
  # eval prompt_jgarrett_color_git_sha=${8:-'${yellow}'}
  eval prompt_jgarrett_color_ruby_version=${8:-'${yellow}'}

  # Override the default clear-screen so that ^L displays the prompt in its
  # entirety.
  if [[ $widgets[clear-screen] == 'builtin' ]]; then
    zle -N clear-screen prompt_jgarrett_clear_screen
  fi

  #
  # Determine prompt, user and host colors.
  #

  # Root user.
  if [[ "$EUID" = "0" ]] || [[ "$USER" = 'root' ]]; then

    # Set colors.
    eval prompt_jgarrett_color_user=${3:-'${red}'}
    eval prompt_jgarrett_color_host=${3:-'${red}'}
    eval prompt_jgarrett_color_prompt=${3:-'${red}'}

    # Set style.
    eval prompt_jgarrett_user='%S${prompt_jgarrett_color_user}%n%s'
    eval prompt_jgarrett_host='${prompt_jgarrett_color_host}%m' # hostname up to first . (dot) (use %M for full hostname)
    eval prompt_jgarrett_location='${prompt_jgarrett_user}${cyan}@${prompt_jgarrett_host}' # user@host.name

  # On SSH.
  elif [[ -n "$SSH_CLIENT" || -n "$SSH2_CLIENT" ]]; then

    # Set colors.
    eval prompt_jgarrett_color_user=${3:-'${green}'}
    eval prompt_jgarrett_color_host=${3:-'${yellow}'}
    eval prompt_jgarrett_color_prompt=${3:-'${yellow}'}

    # Set style.
    eval prompt_jgarrett_user='%S${prompt_jgarrett_color_user}%n%s'
    eval prompt_jgarrett_host='${prompt_jgarrett_color_host}%m' # hostname up to first . (dot) (use %M for full hostname)
    eval prompt_jgarrett_location='${prompt_jgarrett_user}${cyan}@${prompt_jgarrett_host}' # user@host.name

  # Normal user.
  else

    # Set colors.
    eval prompt_jgarrett_color_user=${1:-'${green}'}
    eval prompt_jgarrett_color_host=${1:-'${green}'}
    eval prompt_jgarrett_color_prompt=${1:-'${grey}'}

    # Set style.
    eval prompt_jgarrett_user=''
    eval prompt_jgarrett_host='${prompt_jgarrett_color_host}%m' # hostname up to first . (dot) (use %M for full hostname)
    eval prompt_jgarrett_location='${prompt_jgarrett_user}${cyan}@${prompt_jgarrett_host}' # user@host.name
  fi

  #
  # Report return code.
  #

  eval prompt_jgarrett_return_code='%(?..${red}%? ⏎  ) '

  #
  # Report local time.
  #

  eval prompt_jgarrett_current_time='${green}%T'    # 24 hour time format
  # eval prompt_jgarrett_current_time='${green}%*'    # 24 hour time format, second precise
  # eval prompt_jgarrett_current_time='${green}%t'    # AM/PM time format

  # Keep the time updated.
  # TODO: Figure out a better way to do this.
  # function schedprompt() {
    # emulate -L zsh
    # zmodload -i zsh/sched

    # # Remove existing event, so that multiple calls to "schedprompt" work OK (you could put one in precmd to push the timer 30 seconds into the future, for example).
    # integer i=${"${(@)zsh_scheduled_events#*:*:}"[(i)schedprompt]}
    # (( i )) && sched -$i

    # # Test that zle is running before calling the widget (recommended to avoid error messages). Otherwise it updates on entry to zle, so there's no loss.
    # zle && zle reset-prompt

    # # This ensures we're not too far off the start of the minute.
    # sched +1 schedprompt
  # }
  # schedprompt

  #
  # Report terminal line number.
  #

  eval prompt_jgarrett_line_number='${green}+${magenta}%!'

  #
  # Report Ruby version.
  #   %v | ruby version
  #

  zstyle ':prezto:module:ruby:info:version' format "${yellow}ruby:%v "

  #
  # Command line editor info.
  #

  # Base style.
  zstyle ':prezto:module:editor:info:keymap:primary' format "${red}❱%(?.${prompt_jgarrett_color_prompt}.${red})❱❱ "

  # Vim insert mode.
  # zstyle ':prezto:module:editor:info:keymap:primary:insert' format "${red}I "

  # Vim overwrite mode.
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format "${red}♺ "

  # Vim normal (command) mode.
  zstyle ':prezto:module:editor:info:keymap:alternate' format "${red}❰%(?.${prompt_jgarrett_color_prompt}.${red})❰❰ "

  # Tab completion mode.
  zstyle ':prezto:module:editor:info:completing' format "${red}..."

  #
  # Use the extended character set, if available.
  #

  typeset -A altchar
  set -A altchar ${(s..)terminfo[acsc]}

  prompt_jgarrett_altchar_enable="%{$terminfo[enacs]%}"
  prompt_jgarrett_altchar_enter="%{$terminfo[smacs]%}"
  prompt_jgarrett_altchar_leave="%{$terminfo[rmacs]%}"

  # Character used to draw line.
  prompt_jgarrett_altchar_padding=${altchar[q]:--}

  # Upper left corner: ┌
  prompt_jgarrett_upper_left_corner=${prompt_jgarrett_altchar_enter}${altchar[l]:--}${altchar[q]:--}${prompt_jgarrett_altchar_leave}

  # Lower left corner: └
  prompt_jgarrett_lower_left_corner=${prompt_jgarrett_altchar_enter}${altchar[m]:--}${altchar[q]:--}${prompt_jgarrett_altchar_leave}

  # Upper right corner: ┐
  prompt_jgarrett_upper_right_corner=${prompt_jgarrett_altchar_enter}${altchar[q]:--}${altchar[k]:--}${prompt_jgarrett_altchar_leave}

  # Upper right corner: ┘
  prompt_jgarrett_lower_right_corner=${prompt_jgarrett_altchar_enter}${altchar[q]:--}${altchar[j]:--}${prompt_jgarrett_altchar_leave}

  #
  # Print out the prompt.
  #

  # Left prompt; base shell level.
  if (( $SHLVL == 1 )); then
    export PROMPT='${prompt_jgarrett_altchar_enable}${prompt_jgarrett_color_prompt}${prompt_jgarrett_lower_left_corner}${editor_info[keymap]}'

  # Left prompt; nested shell level.
  else
    export PROMPT='${prompt_jgarrett_color_prompt}${prompt_jgarrett_lower_left_corner}( ${cyan}$SHLVL ${prompt_jgarrett_color_prompt}) ${editor_info[keymap]}'
  fi

  # Right prompt.
  export RPROMPT='${editor_info[alternate]}${editor_info[overwrite]}${prompt_jgarrett_return_code}${prompt_jgarrett_number_jobs}${prompt_jgarrett_line_number} ${prompt_jgarrett_current_time} %(?.${prompt_jgarrett_color_prompt}.${red})❰${prompt_jgarrett_color_prompt}${prompt_jgarrett_lower_right_corner}'

  # Continuation prompt.
  export PROMPT2='(%_) ${editor_info[keymap]}'

  # Selection prompt.
  export PROMPT3='
(?) ${editor_info[keymap]}'

  # Execution trace prompt.
  export PROMPT4='${yellow}+${blue}%N ${green}@${magenta}%i ${reset_color}'

  # Autocorrection prompt.
  export SPROMPT='
${prompt_jgarrett_color_prompt}Correct ${red}%R${prompt_jgarrett_color_prompt} to ${green}%r${prompt_jgarrett_color_prompt} ? [nyae] '

  # Backup root prompt for Bash.
  export SUDO_PS1="\[\e[31;1;46m\][\u] \w \$\[\e[0m\] "
}

function enrich_append {
  local flag=$1
  local symbol=$2
  local color=${3:-$omg_default_color_on}
  if [[ $flag == false ]]; then symbol=' '; fi

  echo -n "${color}${symbol}  "
}

function get_current_action () {
  local info="$(git rev-parse --git-dir 2>/dev/null)"
  if [ -n "$info" ]; then
    local action
    if [ -f "$info/rebase-merge/interactive" ]
    then
      action=${is_rebasing_interactively:-"rebase -i"}
    elif [ -d "$info/rebase-merge" ]
    then
      action=${is_rebasing_merge:-"rebase -m"}
    else
      if [ -d "$info/rebase-apply" ]
      then
        if [ -f "$info/rebase-apply/rebasing" ]
        then
          action=${is_rebasing:-"rebase"}
        elif [ -f "$info/rebase-apply/applying" ]
        then
          action=${is_applying_mailbox_patches:-"am"}
        else
          action=${is_rebasing_mailbox_patches:-"am/rebase"}
        fi
      elif [ -f "$info/MERGE_HEAD" ]
      then
        action=${is_merging:-"merge"}
      elif [ -f "$info/CHERRY_PICK_HEAD" ]
      then
        action=${is_cherry_picking:-"cherry-pick"}
      elif [ -f "$info/BISECT_LOG" ]
      then
        action=${is_bisecting:-"bisect"}
      fi
    fi

    if [[ -n $action ]]; then printf "%s" "${1-}$action${2-}"; fi
  fi
}

: ${omg_ungit_prompt:=$PS1}
: ${omg_second_line:="%~ • "}
: ${omg_is_a_git_repo_symbol:=''}
: ${omg_has_untracked_files_symbol:=''}        #                ?    
: ${omg_has_adds_symbol:=''}
: ${omg_has_deletions_symbol:=''}
: ${omg_has_cached_deletions_symbol:=''}
: ${omg_has_modifications_symbol:=''}
: ${omg_has_cached_modifications_symbol:=''}
: ${omg_ready_to_commit_symbol:=''}            #   →
: ${omg_is_on_a_tag_symbol:=''}                #   
: ${omg_needs_to_merge_symbol:='ᄉ'}
: ${omg_detached_symbol:=''}
: ${omg_can_fast_forward_symbol:=''}
: ${omg_has_diverged_symbol:=''}               #   
: ${omg_not_tracked_branch_symbol:=''}
: ${omg_rebase_tracking_branch_symbol:=''}     #   
: ${omg_merge_tracking_branch_symbol:=''}      #  
: ${omg_should_push_symbol:=''}                #    
: ${omg_has_stashes_symbol:=''}
: ${omg_has_action_in_progress_symbol:=''}     #                  

function omg_build_prompt {
  # Git info
  local current_commit_hash=$(git rev-parse HEAD 2> /dev/null)
  if [[ -n $current_commit_hash ]]; then local is_a_git_repo=true; fi

  if [[ $is_a_git_repo == true ]]; then
    local current_branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
    if [[ $current_branch == 'HEAD' ]]; then local detached=true; fi

    local number_of_logs="$(git log --pretty=oneline -n1 2> /dev/null | wc -l)"
    if [[ $number_of_logs -eq 0 ]]; then
      local just_init=true
    else
      local upstream=$(git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD) 2> /dev/null)
      if [[ -n "${upstream}" ]]; then local has_upstream=true; fi

      local git_status="$(git status --porcelain 2> /dev/null)"
      local action="$(get_current_action)"

      if [[ $git_status =~ ($'\n'|^).M ]]; then local has_modifications=true; fi
      if [[ $git_status =~ ($'\n'|^)M ]]; then local has_modifications_cached=true; fi
      if [[ $git_status =~ ($'\n'|^)A ]]; then local has_adds=true; fi
      if [[ $git_status =~ ($'\n'|^).D ]]; then local has_deletions=true; fi
      if [[ $git_status =~ ($'\n'|^)D ]]; then local has_deletions_cached=true; fi
      if [[ $git_status =~ ($'\n'|^)[MAD] && ! $git_status =~ ($'\n'|^).[MAD\?] ]]; then local ready_to_commit=true; fi

      local number_of_untracked_files=$(\grep -c "^??" <<< "${git_status}")
      if [[ $number_of_untracked_files -gt 0 ]]; then local has_untracked_files=true; fi

      local tag_at_current_commit=$(git describe --exact-match --tags $current_commit_hash 2> /dev/null)
      if [[ -n $tag_at_current_commit ]]; then local is_on_a_tag=true; fi

      if [[ $has_upstream == true ]]; then
        local commits_diff="$(git log --pretty=oneline --topo-order --left-right ${current_commit_hash}...${upstream} 2> /dev/null)"
        local commits_ahead=$(\grep -c "^<" <<< "$commits_diff")
        local commits_behind=$(\grep -c "^>" <<< "$commits_diff")
      fi

      if [[ $commits_ahead -gt 0 && $commits_behind -gt 0 ]]; then local has_diverged=true; fi
      if [[ $has_diverged == false && $commits_ahead -gt 0 ]]; then local should_push=true; fi

      local will_rebase=$(git config --get branch.${current_branch}.rebase 2> /dev/null)

      local number_of_stashes="$(git stash list -n1 2> /dev/null | wc -l)"
      if [[ $number_of_stashes -gt 0 ]]; then local has_stashes=true; fi
    fi
  fi

  echo "$(custom_build_prompt ${enabled:-true} ${current_commit_hash:-""} ${is_a_git_repo:-false} ${current_branch:-""} ${detached:-false} ${just_init:-false} ${has_upstream:-false} ${has_modifications:-false} ${has_modifications_cached:-false} ${has_adds:-false} ${has_deletions:-false} ${has_deletions_cached:-false} ${has_untracked_files:-false} ${ready_to_commit:-false} ${tag_at_current_commit:-""} ${is_on_a_tag:-false} ${has_upstream:-false} ${commits_ahead:-false} ${commits_behind:-false} ${has_diverged:-false} ${should_push:-false} ${will_rebase:-false} ${has_stashes:-false} ${action})"

}


function custom_build_prompt {
  local enabled=${1}
  local current_commit_hash=${2}
  local is_a_git_repo=${3}
  local current_branch=$4
  local detached=${5}
  local just_init=${6}
  local has_upstream=${7}
  local has_modifications=${8}
  local has_modifications_cached=${9}
  local has_adds=${10}
  local has_deletions=${11}
  local has_deletions_cached=${12}
  local has_untracked_files=${13}
  local ready_to_commit=${14}
  local tag_at_current_commit=${15}
  local is_on_a_tag=${16}
  local has_upstream=${17}
  local commits_ahead=${18}
  local commits_behind=${19}
  local has_diverged=${20}
  local should_push=${21}
  local will_rebase=${22}
  local has_stashes=${23}
  local action=${24}

  local prompt=""
  local original_prompt=$PS1


  local black_on_white="%K{white}%F{black}"
  local yellow_on_white="%K{white}%F{yellow}"
  local red_on_white="%K{white}%F{red}"
  local red_on_black="%K{black}%F{red}"
  local black_on_red="%K{red}%F{black}"
  local white_on_red="%K{red}%F{white}"
  local yellow_on_red="%K{red}%F{yellow}"

  # Flags
  local omg_default_color_on="${black_on_white}"

  local current_path="%~"

  if [[ $is_a_git_repo == true ]]; then
    # on filesystem
    prompt=" ${black_on_white} "
    prompt+=$(enrich_append $is_a_git_repo $omg_is_a_git_repo_symbol "${black_on_white}")
    prompt+=$(enrich_append $has_stashes $omg_has_stashes_symbol "${yellow_on_white}")

    prompt+=$(enrich_append $has_untracked_files $omg_has_untracked_files_symbol "${red_on_white}")
    prompt+=$(enrich_append $has_modifications $omg_has_modifications_symbol "${red_on_white}")
    prompt+=$(enrich_append $has_deletions $omg_has_deletions_symbol "${red_on_white}")


    # ready
    prompt+=$(enrich_append $has_adds $omg_has_adds_symbol "${black_on_white}")
    prompt+=$(enrich_append $has_modifications_cached $omg_has_cached_modifications_symbol "${black_on_white}")
    prompt+=$(enrich_append $has_deletions_cached $omg_has_cached_deletions_symbol "${black_on_white}")

    # next operation

    prompt+=$(enrich_append $ready_to_commit $omg_ready_to_commit_symbol "${red_on_white}")
    prompt+=$(enrich_append $action "${omg_has_action_in_progress_symbol} $action" "${red_on_white}")

    # where

    prompt="${prompt} ${black_on_red}"
    if [[ $detached == true ]]; then
      prompt+=$(enrich_append $detached $omg_detached_symbol "${white_on_red}")
      prompt+=$(enrich_append $detached "(${current_commit_hash:0:7})" "${black_on_red}")
    else
      if [[ $has_upstream == false ]]; then
        prompt+=$(enrich_append true "-- ${omg_not_tracked_branch_symbol}  --  (${current_branch})" "${black_on_red}")
      else
        if [[ $will_rebase == true ]]; then
          local type_of_upstream=$omg_rebase_tracking_branch_symbol
        else
          local type_of_upstream=$omg_merge_tracking_branch_symbol
        fi

        if [[ $has_diverged == true ]]; then
          prompt+=$(enrich_append true "-${commits_behind} ${omg_has_diverged_symbol} +${commits_ahead}" "${white_on_red}")
        else
          if [[ $commits_behind -gt 0 ]]; then
            prompt+=$(enrich_append true "-${commits_behind} %F{white}${omg_can_fast_forward_symbol}%F{black} --" "${black_on_red}")
          fi
          if [[ $commits_ahead -gt 0 ]]; then
            prompt+=$(enrich_append true "-- %F{white}${omg_should_push_symbol}%F{black}  +${commits_ahead}" "${black_on_red}")
          fi
          if [[ $commits_ahead == 0 && $commits_behind == 0 ]]; then
             prompt+=$(enrich_append true " --   -- " "${black_on_red}")
          fi

        fi
        prompt+=$(enrich_append true "(${current_branch} ${type_of_upstream} ${upstream//\/$current_branch/})" "${black_on_red}")
      fi
    fi
    prompt+=$(enrich_append ${is_on_a_tag} "${omg_is_on_a_tag_symbol} ${tag_at_current_commit}" "${black_on_red}")
    prompt+="%k%F{red}%k%f"
  fi

  echo "${prompt}"
}


prompt_jgarrett_setup "$@"
